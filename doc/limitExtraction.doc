/**
\page _LIMITS Extracting 1D and 2D WR cross section and exclusion limits

\subsection 1D WR cross section limits
Checkout and compile HiggsCombine.

\verbatim
cd $CMSSW_RELEASE
git clone https://github.com/cms-analysis/HiggsAnalysis-CombinedLimit.git HiggsAnalysis/CombinedLimit
cd HiggsAnalysis/CombinedLimit
git fetch origin
git checkout v6.2.1
scramv1 b clean
scramv1 b
\endverbatim

First we need to run over the minitrees. A script will submit jobs for each channel for every signal MC, EMu data, DY MC, TT MC. ROOT files will be writtin in a new folder FOLDER/TAG/.

\verbatim
voms-proxy-init --voms cms
make
./scripts/submitAnalysisForLimits.sh TAG FOLDER
\endverbatim

Then generate the Higgs Combine datacards.

\verbatim
python scripts/makeDatacards.py --dir FOLDER/TAG/ --outdir datacards/ -s
\endverbatim

Then run Combine with a user specified number of toys.

\verbatim
python scripts/setLimits.py NTOYS LIMIT_FOLDER/TAG/
\endverbatim

The resulting limits are plotted by executing:

\verbatim
python scripts/plotLimits.py TAG LIMIT_FOLDER/
\endverbatim

A summary plot of the mean signal and background rates can be made by running:

\verbatim
python scripts/datacardsSummary.py  | column -t | tee datacards/summary.txt
python scripts/sig_bg_plot.py
\endverbatim

Go back to \ref index

\subsection 2D exclusion limit versus WR and NuR mass
This secion is under development.

GEN WR MC samples were generated and stored in the FNAL /eos space, and are accessible using the xrootd redirector
\verbatim
root://cmseos.fnal.gov/
\endverbatim

To apply offline selection requirements to these events, execute these commands:
\verbatim
cd cmsWR/scripts/genAndFullOfflineAnalysisJobs
voms-proxy-init --voms cms
copy your grid proxy to ~/.
open makeAndSubmitLxplusBatchScriptsForGenWr.sh in an editor, and change the grid proxy location to ~/, and update outputFileDir
with the location where you want the output files to be stored.  You need 17 GB of space.
./makeAndSubmitLxplusBatchScriptsForGenWr.sh >& jobsToBatch1DayQueue.txt &
\endverbatim
submitting the jobs will take about 50 minutes, and the CPU time needed by each job will be between 300 and 800 seconds.

DO NOT change git repo branches once the jobs are submitted.  To prevent any mishaps, do this work in a separate CMSSW release
with the appropriate packages checked out.

Once the jobs are finished, run this to extract the efficiencies as a function of MNu and MWR:
\verbatim
root -l -b
.L calculateGenWrScaleFactors.C
calculateGenWrScaleFactors()
.q
\endverbatim
The efficiencies will be plotted in a 2D color map, and written to a txt file in the same directory.

*/
